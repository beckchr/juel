<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "../../schema/dtd/document-v20.dtd">
<document>
	<header>
		<title>Getting Started</title>
	</header>
	<body>
		<p>
			The <em>JUEL</em> distribution contains the following JAR files:
		</p>
		<ol>
			<li>
				<code>juel-api-2.2.x.jar</code> - contains the <code>javax.el</code>
				API classes.
			</li>
			<li>
				<code>juel-impl-2.2.x.jar</code> - contains the <code>de.odysseus.el</code>
				implementation classes.
			</li>
			<li>
				<code>juel-spi-2.2.x.jar</code> - contains the <code>META-INF/service/javax.el.ExpressionFactory</code>
				service provider resource. (You will need this if you have several expression
				language implementations on your classpath and want to force <em>JUEL</em>s
				implementation to be chosen by <code>ExpressionFactory.newInstance()</code>).
			</li>
		</ol>
		<p>
			Here's all you need to use the EL in your application (assuming you added
			the JUEL JAR files to your classpath and did <code>import jakarta.el.*</code>):
		</p>
		<ol>
			<li>
				<strong>Factory and Context</strong>
				<source>// the ExpressionFactory implementation is de.odysseus.el.ExpressionFactoryImpl
ExpressionFactory factory = new de.odysseus.el.ExpressionFactoryImpl();

// package de.odysseus.el.util provides a ready-to-use subclass of ELContext
de.odysseus.el.util.SimpleContext context = new de.odysseus.el.util.SimpleContext();</source>
			</li>
			<li>
				<strong>Functions and Variables</strong>
				<source>// map function math:max(int, int) to java.lang.Math.max(int, int)
context.setFunction("math", "max", Math.class.getMethod("max", int.class, int.class));

// map variable foo to 0
context.setVariable("foo", factory.createValueExpression(0, int.class));</source>
			</li>
			<li>
				<strong>Parse and Evaluate</strong>
				<source>// parse our expression
ValueExpression e = factory.createValueExpression(context, "${math:max(foo,bar)}", int.class);

// set value for top-level property "bar" to 1
factory.createValueExpression(context, "${bar}", int.class).setValue(context, 1);

// get value for our expression
System.out.println(e.getValue(context)); // --> 1</source>
			</li>
		</ol>
	</body>
</document>
